INPUT	MACRO
	MOV	AH,01H
	INT 21H
	ENDM
	
POW	MACRO	
	MOV	BH,02H
	MUL	BH
	ENDM	
	
DISP	MACRO	VAR
	MOV	AH,09H
	MOV	DX,OFFSET VAR
	INT	21H
	ENDM

PRINT_C MACRO
	MOV	AH,02H
	INT	21H
	ENDM

DISP1	MACRO	
	MOV	DL,AL
	MOV	AH,02H
	INT	21H
	ENDM
	
	.MODEL	SMALL
	.STACK	64
	
	.DATA
ARRAY1	DB	20 DUP('Z')
ARRAY2	DB	20 DUP('0')
A	DB	0
B	DB	0
C	DB	0
D	DW	0
I1	DB	0
I2	DB	0
MSG1	DB	10,13,	'ENTER YOUR CHOICE:',10,13,'1)HEX TO BCD',10,13,'2)BCD TO HEX',10,13,'3)EXIT$'
MSG	DB	10,13,	'ENTER THE ELEMENT:$'
MSG2	DB	10,13,	'$'
MSG3	DB	10,13,	'INVALID BCD$'
MSG4	DB	0,	' $'
MSG5	DB	10,13,	'THE ANSWER IS: $'
STR1	DB	10,13,'ENTER THE 4 DIGIT DECIMAL NUMBER(E.G ENTER 13 AS 0013)',10,13,'$'
NUM4	DB	0
NUM3	DB	0
NUM2	DB	0
NUM1	DB	0
NUM	DW	0
	STR2	DB	10,13,'THE HEX CONVERSION IS: ',10,13,'$'

	.CODE
MAIN	PROC	FAR
	MOV	AX,@DATA
	MOV	DS,AX
	LEA	SI,ARRAY1	
	LEA	DI,ARRAY2
MENU:
	MOV 	AX,0H
	MOV 	NUM,AX
	MOV	BX,0H
	MOV 	CX,0H
	MOV 	DX,0H
	MOV	I1,00H
	MOV	I2,00H
	MOV	A,0H
	MOV	B,0H
	MOV	C,0H
	MOV	D,0H
	DISP	MSG2
	DISP	MSG1	
	DISP	MSG2
	INPUT	

	MOV	AH,00H
	CMP	AL,31H
	JE	CASE1	
	JG	C2
C2:	CMP	AL,32H	
	JE	A1
	JG	C1
A1:
	JMP	CASE2
C1:	JMP	CASE3
	
CASE1:
	DISP	MSG
	DISP	MSG2
	MOV 	CL,04H
LOOP1:			;this loop takes the input and converts the ascii values of the characters to hex numbers between 0 and F 
	INPUT	
	CMP	AL,40H
	JS	NUMM
	JMP	ALPHA

NUMM:
	SUB	AL,30H
	MOV	[SI],AL
	INC	SI
	LOOP	LOOP1
	JMP	SEC
ALPHA:
	SUB	AL,37H
	MOV	[SI],AL
	INC	SI
	LOOP	LOOP1
SEC:			;this part takes the seperate numbers which are stored in the array and uses multiplication and addition to replicate the original number		
	DISP	MSG2
	DISP	MSG5
	DISP	MSG2	
	LEA	SI,ARRAY1	
	MOV	AL,[SI]
	MOV	B,10H
	MUL	B
	INC	SI
	ADD	AL,[SI] 
	MOV	A,AL
	INC	SI
	MOV	AL,[SI]
	MOV	B,10H
	MUL	B
	INC	SI
	ADD	AL,[SI]
	MOV	AH,A
	MOV	BX,0AH
	MOV	DX,00H
	LEA	SI,ARRAY1
LOOP2:			;this loop converts the hex number to decimal and stores in an array using repeated division by decimal 10
	DIV	BX
	MOV	[SI],DL
	INC	SI
	INC	D
	MOV	DX,00H
	CMP	AX,00H
	JE	OUT2
	LOOP 	LOOP2
OUT2:			;this part converts the decimal number into unpacked bcd 
	MOV	CX,D	
	MOV	BL,02H
OUT1:
	DEC	SI
	MOV	AH,00H
	MOV	AL,[SI]
	MOV	C,04H
	MOV	BL,02H

DTB:			;this part converts the individual decimal numbers to their binary form and stores them in an array through repeated division by decimal 2
	DIV	BL
	MOV	[DI],AH
	DEC	C
	INC	DI
	CMP	C,00H
	JNE	DTB				
OUT3:
	MOV	C,04H
	DEC	DI

OUTPUT:			;this part displays the binary form of the individual decimal number which is obtained above.
	MOV	AL,[DI]
	ADD	AL,30H  
	DISP1
	DEC	C
	DEC	DI
	CMP	C,00H
	JNE	OUTPUT
	DISP	MSG4
	LOOP	OUT1
	JMP	MENU
CASE2:
	MOV SI,0H
	MOV DI,0H
	DISP STR1
	
	INPUT				;SCAN 4TH PLACE
	SUB AL,30H
	MOV NUM4,AL
	
	INPUT				;SCAN 3RD PLACE
	SUB AL,30H
	MOV NUM3,AL
	
	INPUT				;SCAN 2ND PLACE
	SUB AL,30H
	MOV NUM2,AL
	
	INPUT				;SCAN 1ST PLACE
	SUB AL,30H
	MOV NUM1,AL

	DISP STR2

	XOR AX,AX			;MULTIPLY 4TH PLACE WITH 1000(3E8)
	MOV AL,NUM4
	MOV CX,03E8H
	MUL CX
	ADD NUM,AX			;ADD 4TH DIGIT TO SUM
	MOV BX,NUM
	
	XOR AX,AX			;MULTIPLY 3RD PLACE WITH 100(64)
	MOV AL,NUM3
	MOV CX,0064H
	MUL CX
	ADD NUM,AX			;ADD 3RD DIGIT TO SUM
	MOV BX,NUM

	XOR AX,AX			;MULTIPLY 2ND PLACE WITH 10(A)	
	MOV AL,NUM2
	MOV CL,0AH
	MUL CL
	ADD NUM,AX			;ADD 2ND DIGIT TO SUM
	MOV BX,NUM

	XOR AX,AX
	MOV AL,NUM1
	ADD NUM,AX			;ADD FIRST DIGIT TO SUM
	MOV BX,NUM

	MOV CX,0004H
	
	ROL BH,CL			;ROTATE BH TO LEFT BY 4
	AND BH,0FH			;BH NOW CONTAINS 4TH PLACE
	MOV DL,BH
	CMP DL,10
	JGE ALPHA4;NOTLESS
	JMP NUMERIC4
		NUMERIC4:
			ADD DL,30H
			PRINT_C
			JMP BOTH4
		ALPHA4:
			ADD DL,37H
			PRINT_C
			JMP BOTH4
	BOTH4:				;TO END IF-ELSE CONDITIONAL
	
	MOV BX,NUM			;REPLACE BX WITH ACTUAL VALUE AGAIN
	AND BH,0FH			;BH NOW CONTAINS 3RD PLACE
	MOV DL,BH
	CMP DL,10
	JGE ALPHA3;NOTLESS
	JMP NUMERIC3
		NUMERIC3:
			ADD DL,30H
			PRINT_C
			JMP BOTH3
		ALPHA3:
			ADD DL,37H
			PRINT_C
			JMP BOTH3
	BOTH3:				;TO END IF-ELSE CONDITIONAL
	
	ROL BL,CL			;ROTATE BL TO LEFT BY 4
	AND BL,0FH			;BH NOW CONTAINS 2ND PLACE
	MOV DL,BL
	CMP DL,10
	JGE ALPHA2;NOTLESS
	JMP NUMERIC2
		NUMERIC2:
			ADD DL,30H
			PRINT_C
			JMP BOTH2
		ALPHA2:
			ADD DL,37H
			PRINT_C
			JMP BOTH2
	BOTH2:				;TO END IF-ELSE CONDITIONAL
	
	MOV BX,NUM			;REPLACE BX WITH ACTUAL VALUE AGAIN
	AND BL,0FH			;BH NOW CONTAINS 3RD PLACE
	MOV DL,BL
	CMP DL,10
	JGE ALPHAB			;NOTLESS
	JMP NUMERIC
		NUMERIC:
			ADD DL,30H
			PRINT_C
			JMP BOTH
		ALPHAB:
			ADD DL,37H
			PRINT_C
			JMP BOTH
	BOTH:				;TO END IF-ELSE CONDITIONAL

	
JMP	MENU
CASE3:

	MOV	AX,4C00H
	INT	21H

MAIN	ENDP
	END	MAIN
